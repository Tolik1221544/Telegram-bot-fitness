import asyncio
import logging
from datetime import datetime, timedelta
from bot.database import db_manager, Payment, User
from bot.api_client import api_client
from bot.handlers.payment import SUBSCRIPTION_PACKAGES
from telegram import Bot
from bot.config import config

logger = logging.getLogger(__name__)


class TributePaymentChecker:
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π Tribute"""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.check_interval = 60  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        self.is_running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        if self.is_running:
            logger.warning("Payment checker already running")
            return

        self.is_running = True
        logger.info("üîÑ Starting Tribute payment checker...")

        while self.is_running:
            try:
                await self.check_pending_payments()
                await asyncio.sleep(self.check_interval)
            except Exception as e:
                logger.error(f"Error in payment checker: {e}")
                await asyncio.sleep(self.check_interval)

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        self.is_running = False
        logger.info("üõë Stopping Tribute payment checker...")

    async def check_pending_payments(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö pending –ø–ª–∞—Ç–µ–∂–µ–π"""
        async with db_manager.SessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            from sqlalchemy import select

            cutoff_time = datetime.utcnow() - timedelta(hours=24)

            stmt = select(Payment).where(
                Payment.status == 'pending',
                Payment.created_at >= cutoff_time
            )

            result = await session.execute(stmt)
            pending_payments = result.scalars().all()

            if not pending_payments:
                return

            logger.info(f"üìã Checking {len(pending_payments)} pending payments...")

            for payment in pending_payments:
                await self.check_single_payment(payment, session)

    async def check_single_payment(self, payment: Payment, session):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stmt = select(User).where(User.telegram_id == payment.telegram_id)
            result = await session.execute(stmt)
            db_user = result.scalar_one_or_none()

            if not db_user or not db_user.api_token:
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            payment_status = await api_client.check_tribute_payment(payment.telegram_id)

            if not payment_status.get('success'):
                return

            subscription = payment_status.get('subscription', {})

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞—à–µ–º—É –ø–ª–∞—Ç–µ–∂—É
            if not subscription or not subscription.get('isActive'):
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏
            purchase_time = subscription.get('purchasedAt')
            if purchase_time:
                try:
                    purchase_dt = datetime.fromisoformat(purchase_time.replace('Z', '+00:00'))

                    # –ï—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                    if purchase_dt >= payment.created_at:
                        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞–∫–µ—Ç
                        package = next((p for p in SUBSCRIPTION_PACKAGES
                                        if p['id'] == payment.package_id), None)

                        if package:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                            payment.status = 'completed'
                            payment.completed_at = datetime.utcnow()

                            logger.info(f"‚úÖ Payment {payment.payment_id} completed for user {payment.telegram_id}")

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            await self.notify_user_payment_complete(
                                payment.telegram_id,
                                package,
                                subscription
                            )

                            await session.commit()

                except Exception as e:
                    logger.error(f"Error parsing purchase time: {e}")

        except Exception as e:
            logger.error(f"Error checking payment {payment.payment_id}: {e}")

    async def notify_user_payment_complete(self, telegram_id: int, package: dict, subscription: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ"""
        try:
            message = f"""‚úÖ **–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**

üì¶ –ü–∞–∫–µ—Ç: {package['name']}
üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {package['coins']} –º–æ–Ω–µ—Ç
üìÖ –ü–µ—Ä–∏–æ–¥: {package['days']} –¥–Ω–µ–π
‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.get('expiresAt', '–Ω/–¥')[:10] if subscription.get('expiresAt') else '–Ω/–¥'}

–ú–æ–Ω–µ—Ç—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å: /balance"""

            await self.bot.send_message(
                chat_id=telegram_id,
                text=message,
                parse_mode='Markdown'
            )

        except Exception as e:
            logger.error(f"Error sending notification to user {telegram_id}: {e}")
