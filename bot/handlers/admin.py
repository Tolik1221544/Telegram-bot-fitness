from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters, \
    ConversationHandler
from bot.database import db_manager, User, Payment, ReferralLink
from bot.api_client import api_client
from bot.config import config
from bot.utils.charts import generate_spending_chart, generate_revenue_chart
from datetime import datetime, timedelta
import logging
import os
from sqlalchemy import select, func
import uuid

logger = logging.getLogger(__name__)

ADMIN_SET_REG_COINS = 100
ADMIN_SET_USER_EMAIL = 101
ADMIN_SET_USER_AMOUNT = 102
ADMIN_CREATE_REFERRAL = 103


async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Admin panel command"""
    user = update.effective_user

    if user.id not in config.ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    keyboard = [
        [InlineKeyboardButton("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ–Ω—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="admin_set_reg_coins")],
        [InlineKeyboardButton("üí∏ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="admin_set_user_coins")],
        [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞—Ç –º–æ–Ω–µ—Ç", callback_data="admin_spending_chart")],
        [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤", callback_data="admin_revenue_chart")],
        [InlineKeyboardButton("üîó –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ. —Å—Å—ã–ª–∫—É", callback_data="admin_create_referral")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ. —Å—Å—ã–ª–æ–∫", callback_data="admin_list_referrals")],
        [InlineKeyboardButton("üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_user_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    stats_text = await get_admin_stats()

    await update.message.reply_text(
        f"‚öôÔ∏è **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**\n\n{stats_text}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def get_admin_stats():
    """Get admin statistics"""
    async with db_manager.SessionLocal() as session:
        total_users = await session.execute(select(func.count(User.id)))
        total_users = total_users.scalar()

        week_ago = datetime.utcnow() - timedelta(days=7)
        active_users = await session.execute(
            select(func.count(User.id)).where(User.last_active >= week_ago)
        )
        active_users = active_users.scalar()

        total_payments = await session.execute(
            select(func.sum(Payment.amount)).where(Payment.status == 'completed')
        )
        total_revenue = total_payments.scalar() or 0

        today = datetime.utcnow().date()
        today_payments = await session.execute(
            select(func.sum(Payment.amount))
            .where(Payment.status == 'completed')
            .where(func.date(Payment.completed_at) == today)
        )
        today_revenue = today_payments.scalar() or 0

        return f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö \\(7 –¥–Ω–µ–π\\): {active_users}
üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue:.2f} ‚Ç¨
üìÖ –î–æ—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è: {today_revenue:.2f} ‚Ç¨"""


async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle admin callbacks"""
    query = update.callback_query
    user = query.from_user

    if user.id not in config.ADMIN_IDS:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return ConversationHandler.END

    await query.answer()

    logger.info(f"Admin callback: {query.data} from user {user.id}")

    context.user_data.clear()

    if query.data == "admin_set_reg_coins":
        await query.message.reply_text(
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            f"–¢–µ–∫—É—â–µ–µ: {config.DEFAULT_REGISTRATION_COINS}\n\n"
            f"–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
        return ADMIN_SET_REG_COINS

    elif query.data == "admin_set_user_coins":
        await query.message.reply_text(
            "üí∏ –í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
            "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
        return ADMIN_SET_USER_EMAIL

    elif query.data == "admin_spending_chart":
        await send_spending_chart(query.message)
        return ConversationHandler.END

    elif query.data == "admin_revenue_chart":
        await send_revenue_chart(query.message)
        return ConversationHandler.END

    elif query.data == "admin_create_referral":
        await query.message.reply_text(
            "üîó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –§–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä –ú–æ—Å–∫–≤–∞\n\n"
            "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
        return ADMIN_CREATE_REFERRAL

    elif query.data == "admin_list_referrals":
        await show_referral_links(query.message)
        return ConversationHandler.END

    elif query.data == "admin_user_stats":
        await show_user_stats(query.message)
        return ConversationHandler.END

    return ConversationHandler.END


async def set_registration_coins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        coins = int(update.message.text)
        if coins < 0:
            raise ValueError("Negative coins")

        config.DEFAULT_REGISTRATION_COINS = coins

        keyboard = [[InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin")]]

        await update.message.reply_text(
            f"‚úÖ –ë–æ–Ω—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {coins} –º–æ–Ω–µ—Ç",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except ValueError:
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin")]]
        await update.message.reply_text(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_SET_REG_COINS

    return ConversationHandler.END


async def set_user_coins_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    email = update.message.text.strip()

    if '@' not in email or '.' not in email:
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin")]]
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_SET_USER_EMAIL

    context.user_data['admin_target_email'] = email

    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin")]]

    await update.message.reply_text(
        f"üìß Email: {email}\n"
        "üí∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_SET_USER_AMOUNT


async def set_user_coins_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        coins = int(update.message.text)
        if coins < 0:
            raise ValueError("Negative")

        email = context.user_data.get('admin_target_email')
        if not email:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /admin")
            return ConversationHandler.END

        keyboard = [[InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin")]]

        # Send verification code
        success = await api_client.send_verification_code(email)
        if not success:
            await update.message.reply_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return ConversationHandler.END

        test_codes = {
            'test@lightweightfit.com': '123456',
            'demo@lightweightfit.com': '111111',
            'review@lightweightfit.com': '777777',
            'apple.review@lightweightfit.com': '999999',
            'dev@lightweightfit.com': '000000'
        }

        if email in test_codes:
            auth_result = await api_client.confirm_email(email, test_codes[email])
            token = auth_result['accessToken']

            # Set balance
            await api_client.set_balance(token, coins, 'admin')

            await update.message.reply_text(
                f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {coins} –º–æ–Ω–µ—Ç –¥–ª—è {email}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text(
                f"üìß –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}\n",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    except ValueError:
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin")]]
        await update.message.reply_text(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_SET_USER_AMOUNT
    except Exception as e:
        logger.error(f"Error setting user coins: {e}")
        keyboard = [[InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin")]]
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    finally:
        # Cleanup
        if 'admin_target_email' in context.user_data:
            del context.user_data['admin_target_email']

    return ConversationHandler.END


async def create_referral_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Create new referral link"""
    name = update.message.text.strip()

    keyboard = [[InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin")]]

    if not name:
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ConversationHandler.END

    code = str(uuid.uuid4())[:8]

    async with db_manager.SessionLocal() as session:
        link = ReferralLink(
            code=code,
            name=name,
            creator_telegram_id=update.effective_user.id
        )
        session.add(link)
        await session.commit()

    bot_username = config.BOT_USERNAME.replace('@', '')
    link_url = f"https://t.me/{bot_username}?start={code}"

    await update.message.reply_text(
        f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"üîó –°—Å—ã–ª–∫–∞: `{link_url}`\n"
        f"üìä –ö–æ–¥: {code}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return ConversationHandler.END


async def send_spending_chart(message):
    try:
        from bot.api_client import api_client

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ message
        if hasattr(message, 'chat_id'):
            # –≠—Ç–æ callback_query.message
            user_id = message.chat_id
        elif hasattr(message, 'chat'):
            # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_id = message.chat.id
        else:
            logger.error(f"‚ùå Cannot extract user_id from message object")
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        logger.info(f"üìä Getting spending chart for admin user_id: {user_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏–∑ –ë–î
        admin_user = await db_manager.get_user(user_id)

        if not admin_user:
            logger.error(f"‚ùå Admin user {user_id} not found in DB")
            await message.reply_text("‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ email")
            return

        if not admin_user.api_token:
            logger.error(f"‚ùå Admin user {user_id} has no API token")
            await message.reply_text(
                "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîó –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
            )
            return

        logger.info(f"‚úÖ Found admin with token, requesting data from server...")

        try:
            stats_response = await api_client._request(
                'GET',
                '/api/stats/coin-spending-daily?days=30',
                headers={'Authorization': f'Bearer {admin_user.api_token}'}
            )
        except Exception as api_error:
            logger.error(f"API request failed: {api_error}")
            await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ API: {str(api_error)}")
            return

        if not stats_response:
            logger.warning("Empty response from API")
            await message.reply_text("üìä API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            return

        if 'data' in stats_response:
            daily_stats = stats_response['data']
        elif 'success' in stats_response and stats_response.get('data'):
            daily_stats = stats_response['data']
        elif isinstance(stats_response, list):
            daily_stats = stats_response
        else:
            logger.error(f"Unexpected API response structure: {stats_response}")
            await message.reply_text("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
            return

        if not daily_stats:
            await message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ç–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π")
            return

        logger.info(f"üìä Got {len(daily_stats)} days of data from server")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        from bot.utils.charts import generate_spending_chart_from_server_data
        chart_path = await generate_spending_chart_from_server_data(daily_stats)

        with open(chart_path, 'rb') as photo:
            # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Ç—Ä–∞—Ç
            total_spent = sum(
                stat.get('TotalSpent', stat.get('totalSpent', 0))
                for stat in daily_stats
            )

            await message.reply_photo(
                photo=photo,
                caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞—Ç –º–æ–Ω–µ—Ç –∑–∞ 30 –¥–Ω–µ–π\n\n"
                        f"üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent} –º–æ–Ω–µ—Ç\n"
                        f"üìÖ –î–Ω–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é: {len(daily_stats)}"
            )

        os.remove(chart_path)
        logger.info("‚úÖ Spending chart sent successfully")

    except Exception as e:
        logger.error(f"Error generating spending chart: {e}")
        logger.exception("Full traceback:")
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")


async def send_revenue_chart(message):
    try:
        from bot.api_client import api_client

        if hasattr(message, 'chat_id'):
            user_id = message.chat_id
        elif hasattr(message, 'chat'):
            user_id = message.chat.id
        else:
            logger.error(f"‚ùå Cannot extract user_id from message object")
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        logger.info(f"üìà Getting revenue chart for admin user_id: {user_id}")

        admin_user = await db_manager.get_user(user_id)

        if not admin_user:
            logger.error(f"‚ùå Admin user {user_id} not found in DB")
            await message.reply_text("‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        if not admin_user.api_token:
            logger.error(f"‚ùå Admin user {user_id} has no API token")
            await message.reply_text(
                "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîó –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
            )
            return

        logger.info(f"‚úÖ Found admin with token, requesting revenue data...")

        # –ó–∞–ø—Ä–æ—Å –∫ –±—ç–∫–µ–Ω–¥—É
        try:
            revenue_response = await api_client._request(
                'GET',
                '/api/stats/revenue-daily?days=30',
                headers={'Authorization': f'Bearer {admin_user.api_token}'}
            )
        except Exception as api_error:
            logger.error(f"API request failed: {api_error}")
            await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ API: {str(api_error)}")
            return

        if not revenue_response:
            logger.warning("Empty response from API")
            await message.reply_text("üìà API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            return

        if 'data' in revenue_response:
            daily_revenue = revenue_response['data']
        elif 'success' in revenue_response and revenue_response.get('data'):
            daily_revenue = revenue_response['data']
        elif isinstance(revenue_response, list):
            daily_revenue = revenue_response
        else:
            logger.error(f"Unexpected API response structure: {revenue_response}")
            await message.reply_text("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
            return

        if not daily_revenue:
            await message.reply_text("üìà –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π")
            return

        logger.info(f"üìà Got {len(daily_revenue)} days of revenue data")

        from bot.utils.charts import generate_revenue_chart_from_server_data
        chart_path = await generate_revenue_chart_from_server_data(daily_revenue, [])

        with open(chart_path, 'rb') as photo:
            total_revenue = sum(
                stat.get('TotalRevenue', stat.get('totalRevenue', 0))
                for stat in daily_revenue
            )

            await message.reply_photo(
                photo=photo,
                caption=f"üìà –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ 30 –¥–Ω–µ–π\n\n"
                        f"üí∞ –í—Å–µ–≥–æ: {total_revenue:.2f} ‚Ç¨\n"
                        f"üìÖ –î–Ω–µ–π —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏: {len(daily_revenue)}"
            )

        os.remove(chart_path)
        logger.info("‚úÖ Revenue chart sent successfully")

    except Exception as e:
        logger.error(f"Error generating revenue chart: {e}")
        logger.exception("Full traceback:")
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def show_referral_links(message):
    """Show all referral links with stats"""
    async with db_manager.SessionLocal() as session:
        result = await session.execute(
            select(ReferralLink)
            .where(ReferralLink.is_active == True)
            .order_by(ReferralLink.created_at.desc())
        )
        links = result.scalars().all()

    if not links:
        await message.reply_text("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫")
        return

    bot_username = config.BOT_USERNAME.replace('@', '')
    text = "üìã **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏:**\n\n"

    for link in links[:10]:
        link_url = f"https://t.me/{bot_username}?start={link.code}"
        text += f"**{link.name}**\n"
        text += f"üîó `{link_url}`\n"
        text += f"üëÅ –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {link.clicks}\n"
        text += f"üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {link.registrations}\n"
        text += f"üí∞ –ü–æ–∫—É–ø–æ–∫: {link.purchases}\n"
        text += f"üíµ –î–æ—Ö–æ–¥: {link.total_revenue:.2f} ‚Ç¨\n\n"

    await message.reply_text(text, parse_mode='Markdown')


async def show_user_stats(message):
    """Show detailed user statistics FROM BACKEND"""
    if hasattr(message, 'chat_id'):
        user_id = message.chat_id
    else:
        user_id = message.chat.id

    admin_user = await db_manager.get_user(user_id)

    if not admin_user or not admin_user.api_token:
        await message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ /start")
        return

    try:
        from bot.api_client import api_client

        logger.info(f"üìä Getting user stats from backend for admin {user_id}")

        # 1. ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º /api/health/db-info
        db_info = await api_client._request(
            'GET',
            '/api/health/db-info'
        )

        total_users = db_info.get('users', 0)
        total_activities = db_info.get('activities', 0)
        total_food_intakes = db_info.get('foodIntakes', 0)
        total_steps_records = db_info.get('stepsRecords', 0)

        revenue_stats = await api_client._request(
            'GET',
            '/api/stats/revenue-by-source?days=30',
            headers={'Authorization': f'Bearer {admin_user.api_token}'}
        )

        tribute_count = revenue_stats.get('data', {}).get('tribute', {}).get('count', 0)
        mobile_count = revenue_stats.get('data', {}).get('mobile', {}).get('count', 0)
        total_active_subs = tribute_count + mobile_count

        tribute_revenue = revenue_stats.get('data', {}).get('tribute', {}).get('revenue', 0)
        mobile_revenue = revenue_stats.get('data', {}).get('mobile', {}).get('revenue', 0)
        total_revenue = revenue_stats.get('data', {}).get('total', {}).get('revenue', 0)

        text = "üë• **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
        text += f"üì± –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        text += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (30 –¥–Ω–µ–π): {total_active_subs}\n"
        text += f"  ‚Ä¢ üí≥ Tribute: {tribute_count}\n"
        text += f"  ‚Ä¢ üì± Mobile: {mobile_count}\n\n"

        text += f"**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
        text += f"üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total_activities}\n"
        text += f"üçΩ –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {total_food_intakes}\n"
        text += f"üë£ –ó–∞–ø–∏—Å–µ–π —à–∞–≥–æ–≤: {total_steps_records}\n\n"

        text += f"**–î–æ—Ö–æ–¥—ã (30 –¥–Ω–µ–π):**\n"
        text += f"üí∞ –í—Å–µ–≥–æ: {total_revenue:.2f} ‚Ç¨\n"
        text += f"  ‚Ä¢ Tribute: {tribute_revenue:.2f} ‚Ç¨\n"
        text += f"  ‚Ä¢ Mobile: {mobile_revenue:.2f} ‚Ç¨\n"

        await message.reply_text(text, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"Error getting user stats: {e}")
        logger.exception("Full traceback:")
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


async def cancel_admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):

    context.user_data.clear()

    keyboard = [[InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin")]]

    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ConversationHandler.END


async def admin_callback_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle admin button click from main menu"""
    query = update.callback_query
    user = query.from_user

    if user.id not in config.ADMIN_IDS:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ–Ω—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="admin_set_reg_coins")],
        [InlineKeyboardButton("üí∏ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="admin_set_user_coins")],
        [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞—Ç –º–æ–Ω–µ—Ç", callback_data="admin_spending_chart")],
        [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤", callback_data="admin_revenue_chart")],
        [InlineKeyboardButton("üîó –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ. —Å—Å—ã–ª–∫—É", callback_data="admin_create_referral")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ. —Å—Å—ã–ª–æ–∫", callback_data="admin_list_referrals")],
        [InlineKeyboardButton("üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_user_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    stats_text = await get_admin_stats()

    await query.message.edit_text(
        f"‚öôÔ∏è **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**\n\n{stats_text}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def register_admin_handlers(application):
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CallbackQueryHandler(admin_callback_button, pattern="^admin$"))

    admin_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(handle_admin_callback, pattern="^admin_")
        ],
        states={
            ADMIN_SET_REG_COINS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_registration_coins),
                CallbackQueryHandler(cancel_admin_action, pattern="^admin$")
            ],
            ADMIN_SET_USER_EMAIL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_user_coins_email),
                CallbackQueryHandler(cancel_admin_action, pattern="^admin$")
            ],
            ADMIN_SET_USER_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_user_coins_amount),
                CallbackQueryHandler(cancel_admin_action, pattern="^admin$")
            ],
            ADMIN_CREATE_REFERRAL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, create_referral_link),
                CallbackQueryHandler(cancel_admin_action, pattern="^admin$")
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_admin_action),
            CommandHandler("start", cancel_admin_action),
            CallbackQueryHandler(cancel_admin_action, pattern="^admin$"),
            CallbackQueryHandler(admin_callback_button, pattern="^admin$")
        ],
        per_user=True,
        per_chat=True,
        per_message=False,
        allow_reentry=True,
        conversation_timeout=300
    )

    application.add_handler(admin_conv)