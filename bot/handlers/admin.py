from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters, \
    ConversationHandler
from bot.database import db_manager, User, Payment, ReferralLink
from bot.api_client import api_client
from bot.config import config
from bot.utils.charts import generate_spending_chart, generate_revenue_chart
from datetime import datetime, timedelta
import logging
import os
from sqlalchemy import select, func
import uuid

logger = logging.getLogger(__name__)

ADMIN_SET_REG_COINS = 100
ADMIN_SET_USER_EMAIL = 101
ADMIN_SET_USER_AMOUNT = 102
ADMIN_CREATE_REFERRAL = 103


async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Admin panel command"""
    user = update.effective_user

    if user.id not in config.ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    keyboard = [
        [InlineKeyboardButton("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ–Ω—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="admin_set_reg_coins")],
        [InlineKeyboardButton("üí∏ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="admin_set_user_coins")],
        [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞—Ç –º–æ–Ω–µ—Ç", callback_data="admin_spending_chart")],
        [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤", callback_data="admin_revenue_chart")],
        [InlineKeyboardButton("üîó –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ. —Å—Å—ã–ª–∫—É", callback_data="admin_create_referral")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ. —Å—Å—ã–ª–æ–∫", callback_data="admin_list_referrals")],
        [InlineKeyboardButton("üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_user_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    stats_text = await get_admin_stats()

    await update.message.reply_text(
        f"‚öôÔ∏è **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**\n\n{stats_text}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def get_admin_stats():
    """Get admin statistics"""
    async with db_manager.SessionLocal() as session:
        total_users = await session.execute(select(func.count(User.id)))
        total_users = total_users.scalar()

        week_ago = datetime.utcnow() - timedelta(days=7)
        active_users = await session.execute(
            select(func.count(User.id)).where(User.last_active >= week_ago)
        )
        active_users = active_users.scalar()

        total_payments = await session.execute(
            select(func.sum(Payment.amount)).where(Payment.status == 'completed')
        )
        total_revenue = total_payments.scalar() or 0

        today = datetime.utcnow().date()
        today_payments = await session.execute(
            select(func.sum(Payment.amount))
            .where(Payment.status == 'completed')
            .where(func.date(Payment.completed_at) == today)
        )
        today_revenue = today_payments.scalar() or 0

        return f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö \\(7 –¥–Ω–µ–π\\): {active_users}
üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue:.2f} ‚Ç¨
üìÖ –î–æ—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è: {today_revenue:.2f} ‚Ç¨"""


async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle admin callbacks"""
    query = update.callback_query
    user = query.from_user

    if user.id not in config.ADMIN_IDS:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return ConversationHandler.END

    await query.answer()

    if query.data == "admin_set_reg_coins":
        await query.message.reply_text(
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            f"–¢–µ–∫—É—â–µ–µ: {config.DEFAULT_REGISTRATION_COINS}"
        )
        return ADMIN_SET_REG_COINS

    elif query.data == "admin_set_user_coins":
        await query.message.reply_text(
            "üí∏ –í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )
        return ADMIN_SET_USER_EMAIL

    elif query.data == "admin_spending_chart":
        await send_spending_chart(query.message)
        return ConversationHandler.END

    elif query.data == "admin_revenue_chart":
        await send_revenue_chart(query.message)
        return ConversationHandler.END

    elif query.data == "admin_create_referral":
        await query.message.reply_text(
            "üîó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –§–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä –ú–æ—Å–∫–≤–∞"
        )
        return ADMIN_CREATE_REFERRAL

    elif query.data == "admin_list_referrals":
        await show_referral_links(query.message)
        return ConversationHandler.END

    elif query.data == "admin_user_stats":
        await show_user_stats(query.message)
        return ConversationHandler.END

    return ConversationHandler.END


async def set_registration_coins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Set registration bonus coins"""
    try:
        coins = int(update.message.text)
        if coins < 0:
            raise ValueError("Negative coins")

        config.DEFAULT_REGISTRATION_COINS = coins
        await update.message.reply_text(f"‚úÖ –ë–æ–Ω—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {coins} –º–æ–Ω–µ—Ç")
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

    return ConversationHandler.END


async def set_user_coins_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Step 1: Get email"""
    email = update.message.text.strip()
    context.user_data['admin_target_email'] = email

    await update.message.reply_text(
        f"üìß Email: {email}\n"
        "üí∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç:"
    )
    return ADMIN_SET_USER_AMOUNT


async def set_user_coins_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Step 2: Get amount and set coins"""
    try:
        coins = int(update.message.text)
        if coins < 0:
            raise ValueError("Negative")

        email = context.user_data.get('admin_target_email')
        if not email:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: email –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END

        # Send verification code
        success = await api_client.send_verification_code(email)
        if not success:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END

        # Auto-confirm for test accounts
        test_codes = {
            'test@lightweightfit.com': '123456',
            'demo@lightweightfit.com': '111111',
            'review@lightweightfit.com': '777777',
            'apple.review@lightweightfit.com': '999999',
            'dev@lightweightfit.com': '000000'
        }

        if email in test_codes:
            auth_result = await api_client.confirm_email(email, test_codes[email])
            token = auth_result['accessToken']

            # Set balance
            await api_client.set_balance(token, coins, 'admin')

            await update.message.reply_text(
                f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {coins} –º–æ–Ω–µ—Ç –¥–ª—è {email}"
            )
        else:
            await update.message.reply_text(
                f"üìß –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
            )

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"Error setting user coins: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        # Cleanup
        if 'admin_target_email' in context.user_data:
            del context.user_data['admin_target_email']

    return ConversationHandler.END


async def create_referral_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Create new referral link"""
    name = update.message.text.strip()

    if not name:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return ConversationHandler.END

    # Generate unique code
    code = str(uuid.uuid4())[:8]

    async with db_manager.SessionLocal() as session:
        link = ReferralLink(
            code=code,
            name=name,
            creator_telegram_id=update.effective_user.id
        )
        session.add(link)
        await session.commit()

    bot_username = config.BOT_USERNAME.replace('@', '')
    link_url = f"https://t.me/{bot_username}?start={code}"

    await update.message.reply_text(
        f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"üîó –°—Å—ã–ª–∫–∞: `{link_url}`\n"
        f"üìä –ö–æ–¥: {code}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
        parse_mode='Markdown'
    )

    return ConversationHandler.END


async def send_spending_chart(message):
    """Send coin spending chart"""
    try:
        async with db_manager.SessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            start_date = datetime.utcnow() - timedelta(days=30)

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from bot.database import LwCoinTransaction

            result = await session.execute(
                select(
                    func.date(LwCoinTransaction.created_at).label('date'),
                    func.sum(LwCoinTransaction.amount).label('total')
                )
                .where(LwCoinTransaction.created_at >= start_date)
                .where(LwCoinTransaction.amount < 0)  # –¢–æ–ª—å–∫–æ —Ç—Ä–∞—Ç—ã
                .group_by(func.date(LwCoinTransaction.created_at))
                .order_by(func.date(LwCoinTransaction.created_at))
            )

            data = result.all()

        if not data:
            await message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ç–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π")
            return

        # Generate chart
        chart_path = await generate_spending_chart(data)

        with open(chart_path, 'rb') as photo:
            await message.reply_photo(
                photo=photo,
                caption="üìä –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞—Ç –º–æ–Ω–µ—Ç –∑–∞ 30 –¥–Ω–µ–π"
            )

        # Cleanup
        os.remove(chart_path)

    except Exception as e:
        logger.error(f"Error generating spending chart: {e}")
        logger.exception("Full traceback:")
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")


async def send_revenue_chart(message):
    """Send revenue chart"""
    try:
        async with db_manager.SessionLocal() as session:
            start_date = datetime.utcnow() - timedelta(days=30)

            result = await session.execute(
                select(
                    func.date(Payment.completed_at).label('date'),
                    func.sum(Payment.amount).label('total')
                )
                .where(Payment.status == 'completed')
                .where(Payment.completed_at >= start_date)
                .group_by(func.date(Payment.completed_at))
                .order_by(func.date(Payment.completed_at))
            )

            data = result.all()

        if not data:
            await message.reply_text("üìà –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π")
            return

        # Generate chart
        chart_path = await generate_revenue_chart(data)

        with open(chart_path, 'rb') as photo:
            await message.reply_photo(
                photo=photo,
                caption="üìà –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ 30 –¥–Ω–µ–π"
            )

        os.remove(chart_path)

    except Exception as e:
        logger.error(f"Error generating revenue chart: {e}")
        logger.exception("Full traceback:")
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")


async def show_referral_links(message):
    """Show all referral links with stats"""
    async with db_manager.SessionLocal() as session:
        result = await session.execute(
            select(ReferralLink)
            .where(ReferralLink.is_active == True)
            .order_by(ReferralLink.created_at.desc())
        )
        links = result.scalars().all()

    if not links:
        await message.reply_text("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫")
        return

    bot_username = config.BOT_USERNAME.replace('@', '')
    text = "üìã **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏:**\n\n"

    for link in links[:10]:
        link_url = f"https://t.me/{bot_username}?start={link.code}"
        text += f"**{link.name}**\n"
        text += f"üîó `{link_url}`\n"
        text += f"üëÅ –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {link.clicks}\n"
        text += f"üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {link.registrations}\n"
        text += f"üí∞ –ü–æ–∫—É–ø–æ–∫: {link.purchases}\n"
        text += f"üíµ –î–æ—Ö–æ–¥: {link.total_revenue:.2f} ‚Ç¨\n\n"

    await message.reply_text(text, parse_mode='Markdown')


async def show_user_stats(message):
    """Show detailed user statistics"""
    async with db_manager.SessionLocal() as session:
        result = await session.execute(
            select(
                User.referred_by,
                func.count(User.id).label('count')
            )
            .group_by(User.referred_by)
        )
        referral_stats = result.all()

        result = await session.execute(
            select(func.count(Payment.id))
            .where(Payment.status == 'completed')
            .where(Payment.completed_at >= datetime.utcnow() - timedelta(days=30))
        )
        active_subs = result.scalar()

    text = "üë• **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
    text += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subs}\n\n"
    text += "**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:**\n"

    for source, count in referral_stats[:10]:
        if source:
            text += f"‚Ä¢ {source}: {count} —á–µ–ª\\.\n"
        else:
            text += f"‚Ä¢ –ü—Ä—è–º—ã–µ: {count} —á–µ–ª\\.\n"

    await message.reply_text(text, parse_mode='Markdown')


async def cancel_admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel admin action"""
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ\n/admin - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å")
    return ConversationHandler.END


async def admin_callback_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle admin button click from main menu"""
    query = update.callback_query
    user = query.from_user

    if user.id not in config.ADMIN_IDS:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ–Ω—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="admin_set_reg_coins")],
        [InlineKeyboardButton("üí∏ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="admin_set_user_coins")],
        [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞—Ç –º–æ–Ω–µ—Ç", callback_data="admin_spending_chart")],
        [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤", callback_data="admin_revenue_chart")],
        [InlineKeyboardButton("üîó –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ. —Å—Å—ã–ª–∫—É", callback_data="admin_create_referral")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ. —Å—Å—ã–ª–æ–∫", callback_data="admin_list_referrals")],
        [InlineKeyboardButton("üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_user_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    stats_text = await get_admin_stats()

    await query.message.edit_text(
        f"‚öôÔ∏è **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**\n\n{stats_text}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


def register_admin_handlers(application):
    """Register admin handlers"""
    application.add_handler(CommandHandler("admin", admin_command))

    application.add_handler(CallbackQueryHandler(admin_callback_button, pattern="^admin$"))

    admin_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_admin_callback, pattern="^admin_")],
        states={
            ADMIN_SET_REG_COINS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_registration_coins)
            ],
            ADMIN_SET_USER_EMAIL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_user_coins_email)
            ],
            ADMIN_SET_USER_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_user_coins_amount)
            ],
            ADMIN_CREATE_REFERRAL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, create_referral_link)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel_admin_action)]
    )

    application.add_handler(admin_conv)