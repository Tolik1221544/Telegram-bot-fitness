# bot/handlers/payment.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters, ConversationHandler, \
    CommandHandler
from bot.database import db_manager, Payment
from bot.api_client import api_client
from bot.config import config
import logging
import uuid
import aiohttp
import hashlib
from datetime import datetime
from typing import Optional, List, Dict
import asyncio

logger = logging.getLogger(__name__)

AWAITING_PROMO = 1


class TributePayment:
    """Tribute.tg payment integration with Products API"""

    def __init__(self):
        self.api_key = config.TRIBUTE_API_KEY
        self.webhook_secret = config.TRIBUTE_WEBHOOK_SECRET
        self.base_url = "https://tribute.tg/api"

        # ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ Tribute (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è)
        self.product_ids = {
            'week_50': None,  # –ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            'two_weeks_100': None,
            'month_200': None,
            'month_500': None,
        }

    async def init_products(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ Tribute
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
        """
        logger.info("üõçÔ∏è Initializing Tribute products...")

        products_to_create = [
            {
                'name': 'üìÖ –ù–µ–¥–µ–ª—è (50 –º–æ–Ω–µ—Ç)',
                'price': 99,
                'description': '50 –º–æ–Ω–µ—Ç –Ω–∞ 7 –¥–Ω–µ–π',
                'key': 'week_50',
                'coins': 50,
                'days': 7
            },
            {
                'name': 'üìÜ 2 –Ω–µ–¥–µ–ª–∏ (100 –º–æ–Ω–µ—Ç)',
                'price': 199,
                'description': '100 –º–æ–Ω–µ—Ç –Ω–∞ 14 –¥–Ω–µ–π',
                'key': 'two_weeks_100',
                'coins': 100,
                'days': 14
            },
            {
                'name': 'üìÜ –ú–µ—Å—è—Ü (200 –º–æ–Ω–µ—Ç)',
                'price': 299,
                'description': '200 –º–æ–Ω–µ—Ç –Ω–∞ 30 –¥–Ω–µ–π',
                'key': 'month_200',
                'coins': 200,
                'days': 30
            },
            {
                'name': 'üíé –ü—Ä–µ–º–∏—É–º (500 –º–æ–Ω–µ—Ç)',
                'price': 499,
                'description': '500 –º–æ–Ω–µ—Ç –Ω–∞ 30 –¥–Ω–µ–π',
                'key': 'month_500',
                'coins': 500,
                'days': 30
            }
        ]

        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        existing_products = await self.get_products()

        for product_data in products_to_create:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç
            existing = next(
                (p for p in existing_products if p['name'] == product_data['name']),
                None
            )

            if existing:
                logger.info(f"‚úÖ Product already exists: {product_data['name']} (ID: {existing['id']})")
                self.product_ids[product_data['key']] = existing['id']
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
                result = await self.create_product(
                    name=product_data['name'],
                    price=product_data['price'],
                    description=product_data['description']
                )

                if result['success']:
                    product_id = result['product_id']
                    self.product_ids[product_data['key']] = product_id
                    logger.info(f"‚úÖ Created product: {product_data['name']} (ID: {product_id})")
                else:
                    logger.error(f"‚ùå Failed to create product: {product_data['name']}")

        logger.info(f"üõçÔ∏è Products initialized: {self.product_ids}")

    async def get_products(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        if not self.api_key:
            return []

        params = {
            "api_key": self.api_key
        }

        try:
            timeout = aiohttp.ClientTimeout(total=10)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(
                        f"{self.base_url}/products",
                        params=params
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data.get('products', [])
                    else:
                        logger.error(f"Failed to get products: {response.status}")
                        return []
        except Exception as e:
            logger.error(f"Error getting products: {e}")
            return []

    async def create_product(self, name: str, price: float, description: str) -> dict:
        """
        –°–æ–∑–¥–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä –≤ Tribute

        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            price: –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
            description: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        """
        if not self.api_key:
            return {"success": False, "error": "API key not configured"}

        params = {
            "api_key": self.api_key,
            "name": name,
            "price": int(price),
            "description": description
        }

        logger.info(f"üì§ Creating product: {name} - {price}‚ÇΩ")

        try:
            timeout = aiohttp.ClientTimeout(total=30)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(
                        f"{self.base_url}/products/create",
                        params=params
                ) as response:
                    response_text = await response.text()

                    logger.info(f"üì• Create product response: {response.status} - {response_text}")

                    if response.status in [200, 201]:
                        try:
                            data = await response.json()
                            product_id = data.get('id') or data.get('product_id')

                            if product_id:
                                return {
                                    "success": True,
                                    "product_id": product_id
                                }
                            else:
                                return {
                                    "success": False,
                                    "error": "No product ID in response"
                                }
                        except:
                            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ JSON, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ ID
                            if response_text.isdigit():
                                return {
                                    "success": True,
                                    "product_id": int(response_text)
                                }
                            return {
                                "success": False,
                                "error": "Invalid response format"
                            }
                    else:
                        return {
                            "success": False,
                            "error": f"HTTP {response.status}"
                        }

        except Exception as e:
            logger.error(f"‚ùå Error creating product: {e}")
            return {"success": False, "error": str(e)}

    async def create_payment_link(self, product_key: str, telegram_id: int,
                                  custom_order_id: Optional[str] = None) -> dict:
        """
        –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞

        Args:
            product_key: –ö–ª—é—á –ø—Ä–æ–¥—É–∫—Ç–∞ (week_50, month_200, –∏ —Ç.–¥.)
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            custom_order_id: –ö–∞—Å—Ç–æ–º–Ω—ã–π ID –∑–∞–∫–∞–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        product_id = self.product_ids.get(product_key)

        if not product_id:
            return {
                "success": False,
                "error": f"Product {product_key} not found"
            }

        params = {
            "api_key": self.api_key,
            "product_id": product_id,
            "telegram_id": telegram_id
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π order_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if custom_order_id:
            params["order_id"] = custom_order_id

        logger.info(f"üì§ Creating payment link for product {product_key} (ID: {product_id})")

        try:
            timeout = aiohttp.ClientTimeout(total=30)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(
                        f"{self.base_url}/create",
                        params=params
                ) as response:
                    response_text = await response.text()

                    logger.info(f"üì• Payment link response: {response.status} - {response_text}")

                    if response.status in [200, 201]:
                        # –û—Ç–≤–µ—Ç - —ç—Ç–æ URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
                        if response_text.startswith('http'):
                            return {
                                "success": True,
                                "payment_url": response_text.strip(),
                                "order_id": custom_order_id
                            }
                        else:
                            try:
                                data = await response.json()
                                payment_url = data.get("payment_url") or data.get("url")

                                return {
                                    "success": True,
                                    "payment_url": payment_url,
                                    "order_id": custom_order_id
                                }
                            except:
                                return {
                                    "success": False,
                                    "error": "Invalid response format"
                                }
                    else:
                        return {
                            "success": False,
                            "error": f"HTTP {response.status}"
                        }

        except Exception as e:
            logger.error(f"‚ùå Error creating payment link: {e}")
            return {"success": False, "error": str(e)}

    async def check_payment_status(self, order_id: str) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã"""
        if not self.api_key:
            return {"success": False, "status": "unknown"}

        params = {
            "api_key": self.api_key,
            "order_id": order_id
        }

        try:
            timeout = aiohttp.ClientTimeout(total=10)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(
                        f"{self.base_url}/status",
                        params=params
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        status = data.get("status", "pending")
                        is_paid = data.get("paid", False) or status in ["paid", "completed", "success"]

                        return {
                            "success": True,
                            "status": "paid" if is_paid else "pending",
                            "amount": data.get("amount"),
                            "order_id": order_id
                        }
                    else:
                        return {"success": False, "status": "unknown"}
        except Exception as e:
            logger.error(f"Error checking payment: {e}")
            return {"success": False, "status": "unknown"}


# –ü–∞–∫–µ—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫
SUBSCRIPTION_PACKAGES = [
    {
        'id': 'week_50',
        'name': 'üìÖ –ù–µ–¥–µ–ª—è (50 –º–æ–Ω–µ—Ç)',
        'coins': 50,
        'days': 7,
        'price': 99,
        'description': '50 –º–æ–Ω–µ—Ç –Ω–∞ 7 –¥–Ω–µ–π'
    },
    {
        'id': 'two_weeks_100',
        'name': 'üìÜ 2 –Ω–µ–¥–µ–ª–∏ (100 –º–æ–Ω–µ—Ç)',
        'coins': 100,
        'days': 14,
        'price': 199,
        'description': '100 –º–æ–Ω–µ—Ç –Ω–∞ 14 –¥–Ω–µ–π'
    },
    {
        'id': 'month_200',
        'name': 'üìÜ –ú–µ—Å—è—Ü (200 –º–æ–Ω–µ—Ç)',
        'coins': 200,
        'days': 30,
        'price': 299,
        'description': '200 –º–æ–Ω–µ—Ç –Ω–∞ 30 –¥–Ω–µ–π'
    },
    {
        'id': 'month_500',
        'name': 'üíé –ü—Ä–µ–º–∏—É–º (500 –º–æ–Ω–µ—Ç)',
        'coins': 500,
        'days': 30,
        'price': 499,
        'description': '500 –º–æ–Ω–µ—Ç –Ω–∞ 30 –¥–Ω–µ–π'
    }
]

tribute = TributePayment()


async def show_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show available subscription packages"""
    query = update.callback_query
    await query.answer()

    keyboard = []

    for package in SUBSCRIPTION_PACKAGES:
        button_text = f"{package['name']} - {package['price']} ‚ÇΩ"
        callback_data = f"buy_package_{package['id']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

    keyboard.append([
        InlineKeyboardButton("üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo")
    ])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    text = """üí≥ **–ü–æ–∫—É–ø–∫–∞ –º–æ–Ω–µ—Ç –∏ –ø–æ–¥–ø–∏—Å–æ–∫**

‚úÖ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Tribute - –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —É–¥–æ–±–Ω–æ
‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏  
‚úÖ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ webhook

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç:"""

    await query.message.edit_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def handle_package_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle subscription package selection"""
    query = update.callback_query
    user = query.from_user
    callback_data = query.data

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–∫–µ—Ç
    if callback_data.startswith("buy_package_"):
        package_id = callback_data.replace("buy_package_", "")
        package = next((p for p in SUBSCRIPTION_PACKAGES if p['id'] == package_id), None)
    else:
        await query.answer("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if not package:
        await query.answer("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = await db_manager.get_user(user.id)
    if not db_user:
        await query.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    if not db_user.api_token:
        keyboard = [[InlineKeyboardButton("üîó –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="link_account")]]
        await query.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    # –°–æ–∑–¥–∞–µ–º order_id
    order_id = str(uuid.uuid4())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with db_manager.SessionLocal() as session:
        payment = Payment(
            user_id=db_user.id,
            telegram_id=user.id,
            payment_id=order_id,
            amount=package['price'],
            currency='RUB',
            status='pending',
            package_id=package['id'],
            coins=package['coins'],
            days=package.get('days', 0)
        )
        session.add(payment)
        await session.commit()

    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Products API
    logger.info(f"üîÑ Creating payment link for: {package['name']}")

    payment_result = await tribute.create_payment_link(
        product_key=package['id'],
        telegram_id=user.id,
        custom_order_id=order_id
    )

    if not payment_result['success']:
        error_msg = payment_result.get('error', 'Unknown')
        logger.error(f"‚ùå Payment link creation failed: {error_msg}")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª–∏ parse_mode='Markdown' –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        await query.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {error_msg}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        return

    # –£—Å–ø–µ—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_result['payment_url'])],
        [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_payment_{order_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="subscriptions")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2
    order_id_short = order_id[:12]

    text = f"""üí≥ *–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Tribute*

üì¶ –ü–∞–∫–µ—Ç: {package['name']}
üí∞ –ú–æ–Ω–µ—Ç: {package['coins']}
üìÖ –ü–µ—Ä–∏–æ–¥: {package['days']} –¥–Ω–µ–π
üíµ –ö –æ–ø–ª–∞—Ç–µ: {package['price']} ‚ÇΩ

‚û°Ô∏è –ù–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å"
‚û°Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª"

üí° –ú–æ–Ω–µ—Ç—ã –∑–∞—á–∏—Å–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã

üÜî ID –∑–∞–∫–∞–∑–∞: `{order_id_short}`"""

    await query.message.edit_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    context.user_data[f'payment_{order_id}'] = {
        'amount': package['price'],
        'coins': package['coins'],
        'days': package.get('days', 0),
        'package_id': package['id']
    }


async def check_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Check payment status"""
    query = update.callback_query
    user = query.from_user

    order_id = query.data.replace("check_payment_", "")

    await query.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Tribute
    status_result = await tribute.check_payment_status(order_id)

    if not status_result['success']:
        await query.answer("‚è≥ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É", show_alert=True)
        return

    status = status_result.get('status')

    if status == 'pending':
        await query.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...", show_alert=True)
        return

    if status in ['paid', 'success', 'completed']:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ª–∏ —É–∂–µ –º–æ–Ω–µ—Ç—ã
        from sqlalchemy import select
        async with db_manager.SessionLocal() as session:
            result = await session.execute(
                select(Payment).where(Payment.payment_id == order_id)
            )
            payment = result.scalar_one_or_none()

            if payment and payment.status == 'completed':
                await query.answer("‚úÖ –ú–æ–Ω–µ—Ç—ã —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã!", show_alert=True)
                return

            if payment and payment.status != 'completed':
                payment.status = 'completed'
                payment.completed_at = datetime.utcnow()
                session.add(payment)
                await session.commit()

                # –ù–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
                db_user = await db_manager.get_user(user.id)

                try:
                    # –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –º–æ–Ω–µ—Ç–∞–º–∏
                    await api_client.purchase_subscription(
                        token=db_user.api_token,
                        coins=payment.coins,
                        days=payment.days,
                        price=float(payment.amount)
                    )

                    success_text = f"""‚úÖ **–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!**

üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {payment.coins} –º–æ–Ω–µ—Ç
üìÖ –ù–∞ {payment.days} –¥–Ω–µ–π
üíµ –û–ø–ª–∞—á–µ–Ω–æ: {payment.amount} ‚ÇΩ

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ

–ú–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç —Å–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ {payment.days} –¥–Ω–µ–π.
/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"""

                    await query.message.reply_text(success_text, parse_mode='Markdown')

                    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    if f'payment_{order_id}' in context.user_data:
                        del context.user_data[f'payment_{order_id}']

                except Exception as e:
                    logger.error(f"‚ùå Activation error: {e}")
                    await query.message.reply_text(
                        f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç**\n\n"
                        f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏.\n"
                        f"ID –∑–∞–∫–∞–∑–∞: `{order_id[:12]}`\n\n"
                        f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —ç—Ç–∏–º ID.",
                        parse_mode='Markdown'
                    )
    else:
        await query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)


def register_payment_handlers(application):
    """Register handlers"""
    application.add_handler(CallbackQueryHandler(show_subscriptions, pattern="^subscriptions$"))
    application.add_handler(CallbackQueryHandler(handle_package_selection, pattern="^buy_package_"))
    application.add_handler(CallbackQueryHandler(check_payment, pattern="^check_payment_"))