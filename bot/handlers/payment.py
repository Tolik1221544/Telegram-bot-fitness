import logging
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from bot.database import db_manager
from bot.api_client import api_client

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TRIBUTE_STORE_LINK = "https://t.me/tribute/app?startapp=sDlI"

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫
SUBSCRIPTION_PACKAGES = [
    {'id': '1month', 'name': '1 –º–µ—Å—è—Ü', 'coins': 100, 'days': 30, 'price': 2},
    {'id': '3months', 'name': '3 –º–µ—Å—è—Ü–∞', 'coins': 300, 'days': 90, 'price': 5},
    {'id': '6months', 'name': '6 –º–µ—Å—è—Ü–µ–≤', 'coins': 600, 'days': 180, 'price': 10},
    {'id': 'year', 'name': '–ì–æ–¥', 'coins': 1200, 'days': 365, 'price': 20}
]


async def show_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    db_user = await db_manager.get_user(user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    if not db_user or not db_user.api_token:
        keyboard = [
            [InlineKeyboardButton("üîó –°–Ω–∞—á–∞–ª–∞ —Å–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç", callback_data="link_account")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
        ]
        await query.message.edit_text(
            "‚ùå –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    # –¢–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
    text = """üí≥ **LightWeight PAY**

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å LW coins —Å–æ —Å–∫–∏–¥–∫–æ–π, –æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω—ã –∏ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:**

‚Ä¢ **1 –º–µ—Å—è—Ü ‚Äî 2 ‚Ç¨** ‚Üí 100 –º–æ–Ω–µ—Ç –Ω–∞ 30 –¥–Ω–µ–π
‚Ä¢ **3 –º–µ—Å—è—Ü–∞ ‚Äî 5 ‚Ç¨** ‚Üí 300 –º–æ–Ω–µ—Ç –Ω–∞ 90 –¥–Ω–µ–π  
‚Ä¢ **6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 10 ‚Ç¨** ‚Üí 600 –º–æ–Ω–µ—Ç –Ω–∞ 180 –¥–Ω–µ–π
‚Ä¢ **–ì–æ–¥ ‚Äî 20 ‚Ç¨** ‚Üí 1200 –º–æ–Ω–µ—Ç –Ω–∞ 365 –¥–Ω–µ–π

**üí° –ö–∞–∫ –∫—É–ø–∏—Ç—å:**
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí≥ –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω Tribute"
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏  
3Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º

‚ö°Ô∏è –ú–æ–Ω–µ—Ç—ã –∑–∞—á–∏—Å–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç!

**üîÑ –°–º–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞:**
‚Ä¢ –ü—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ - –¥–æ–±–∞–≤–∏—Ç—Å—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö
‚Ä¢ –ü—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ - —Ç–µ–∫—É—â–∏–µ –º–æ–Ω–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è
"""

    keyboard = [
        [InlineKeyboardButton("üí≥ –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω Tribute", url=TRIBUTE_STORE_LINK)],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞", callback_data="check_payment")],
        [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="payment_history")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
    ]

    await query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def check_payment_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.callback_query
    await query.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å...", show_alert=False)

    user = query.from_user

    try:
        # –ó–∞–ø—Ä–æ—Å –∫ API
        status = await api_client.check_payment_by_telegram_id(user.id)

        logger.info(f"Payment status response: {status}")

        if not status.get('success'):
            await show_error(query, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        last_payment = status.get('lastPayment', {})
        payment_status = last_payment.get('status', status.get('status'))

        # –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        metadata = None
        if last_payment.get('metadata'):
            try:
                metadata = json.loads(last_payment['metadata'])
            except:
                pass

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
        if metadata:
            operation_type = metadata.get('Type', '')

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞
            if 'tariff_upgrade' in operation_type:
                await show_tariff_upgrade(query, metadata, last_payment)
                return
            elif 'tariff_downgrade' in operation_type:
                await show_tariff_downgrade(query, metadata, last_payment)
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        if payment_status == 'completed':
            await show_completed_payment(query, last_payment)

        elif payment_status == 'pending':
            await show_pending_payment(query, last_payment)

        elif payment_status == 'expired':
            await show_expired_payment(query)

        elif payment_status == 'duplicate':
            await show_duplicate_payment(query)

        elif not status.get('hasPayments'):
            await show_no_payments(query)

        else:
            await show_unknown_status(query, payment_status)

    except Exception as e:
        logger.error(f"Error checking payment: {e}")
        await show_error(query, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ")


async def show_completed_payment(query, payment):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂"""
    amount = payment.get('amount', 0)
    coins = payment.get('coinsAmount', 0)
    package_name = payment.get('packageName', '–ü–æ–¥–ø–∏—Å–∫–∞')

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ —Å—É–º–º–µ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    if package_name == '–ü–æ–¥–ø–∏—Å–∫–∞' or not package_name:
        for pkg in SUBSCRIPTION_PACKAGES:
            if pkg['price'] == amount:
                package_name = pkg['name']
                break

    text = f"""‚úÖ **–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**

üì¶ **–ü–∞–∫–µ—Ç:** {package_name}
üí∞ **–ù–∞—á–∏—Å–ª–µ–Ω–æ –º–æ–Ω–µ—Ç:** {coins}
üíµ **–°—É–º–º–∞:** {amount} EUR

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ

–ú–æ–Ω–µ—Ç—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."""

    keyboard = [
        [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="payment_history")],
        [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
    ]

    await query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_pending_payment(query, payment):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç—ë–∂"""
    amount = payment.get('amount', 0)
    coins = payment.get('coinsAmount', 0)

    text = f"""‚è≥ **–ü–ª–∞—Ç—ë–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è**

üí∞ **–û–∂–∏–¥–∞–µ–º—ã–µ –º–æ–Ω–µ—Ç—ã:** {coins}
üíµ **–°—É–º–º–∞:** {amount} EUR

–ü–ª–∞—Ç—ë–∂ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç.
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."""

    keyboard = [
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_payment")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscriptions")]
    ]

    await query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_tariff_upgrade(query, metadata, payment):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–ø–≥—Ä–µ–π–¥ —Ç–∞—Ä–∏—Ñ–∞"""
    old_package = metadata.get('OldPackage', '–°—Ç–∞—Ä—ã–π')
    new_package = metadata.get('NewPackage', '–ù–æ–≤—ã–π')
    coins_added = metadata.get('CoinsAdded', 0)
    coins_diff = metadata.get('CoinsDifference', 0)

    text = f"""‚¨ÜÔ∏è **–¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—à–µ–Ω!**

üì¶ **–ë—ã–ª–æ:** {old_package}
üì¶ **–°—Ç–∞–ª–æ:** {new_package}

üí∞ **–î–æ–±–∞–≤–ª–µ–Ω–æ –º–æ–Ω–µ—Ç:** +{coins_added}
üìä **–û–±—â–∞—è —Ä–∞–∑–Ω–∏—Ü–∞:** {coins_diff} –º–æ–Ω–µ—Ç

–°–ø–∞—Å–∏–±–æ –∑–∞ –∞–ø–≥—Ä–µ–π–¥! üéâ"""

    keyboard = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]]

    await query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_tariff_downgrade(query, metadata, payment):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—É–Ω–≥—Ä–µ–π–¥ —Ç–∞—Ä–∏—Ñ–∞"""
    old_package = metadata.get('OldPackage', '–°—Ç–∞—Ä—ã–π')
    new_package = metadata.get('NewPackage', '–ù–æ–≤—ã–π')

    text = f"""‚¨áÔ∏è **–¢–∞—Ä–∏—Ñ –∏–∑–º–µ–Ω—ë–Ω**

üì¶ **–ë—ã–ª–æ:** {old_package}
üì¶ **–°—Ç–∞–ª–æ:** {new_package}

‚ÑπÔ∏è **–í–∞–∂–Ω–æ:** –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –º–æ–Ω–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!
–°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ –Ω–æ–≤–æ–º—É —Ç–∞—Ä–∏—Ñ—É."""

    keyboard = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]]

    await query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_expired_payment(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç—ë–∫—à–∏–π –ø–ª–∞—Ç—ë–∂"""
    text = """‚è∞ **–ü–ª–∞—Ç—ë–∂ –∏—Å—Ç—ë–∫**

–ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.
–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –º–∞–≥–∞–∑–∏–Ω–µ Tribute."""

    keyboard = [
        [InlineKeyboardButton("üí≥ –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", url=TRIBUTE_STORE_LINK)],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscriptions")]
    ]

    await query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_duplicate_payment(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –ø–ª–∞—Ç–µ–∂–∞"""
    text = """‚ö†Ô∏è **–≠—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω**

–ú–æ–Ω–µ—Ç—ã —É–∂–µ –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á—ë—Ç.
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."""

    keyboard = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]]

    await query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_no_payments(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π"""
    text = """‚ÑπÔ∏è **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π**

–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É?
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω."""

    keyboard = [
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=TRIBUTE_STORE_LINK)],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscriptions")]
    ]

    await query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_unknown_status(query, status):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"""
    text = f"""‚ùì **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞**

–°—Ç–∞—Ç—É—Å: {status}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""

    keyboard = [
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_payment")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscriptions")]
    ]

    await query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def show_error(query, message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É"""
    text = f"""‚ùå **{message}**

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subscriptions")]]

    await query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

def register_payment_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π"""
    application.add_handler(CallbackQueryHandler(show_subscriptions, pattern="^subscriptions$"))
    application.add_handler(CallbackQueryHandler(check_payment_status, pattern="^check_payment$"))