import asyncio
import uuid
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from bot.api_client import api_client
from bot.config import config
import logging

logger = logging.getLogger(__name__)

SUBSCRIPTION_PACKAGES = [
    {
        'id': '1month',
        'name': '1 –º–µ—Å—è—Ü',
        'coins': 100,
        'days': 30,
        'price': 2,
        'currency': '‚Ç¨',
        'description': '100 –º–æ–Ω–µ—Ç –Ω–∞ 30 –¥–Ω–µ–π'
    },
    {
        'id': '3months',
        'name': '3 –º–µ—Å—è—Ü–∞',
        'coins': 300,
        'days': 90,
        'price': 5,
        'currency': '‚Ç¨',
        'description': '300 –º–æ–Ω–µ—Ç –Ω–∞ 90 –¥–Ω–µ–π'
    },
    {
        'id': '6months',
        'name': '6 –º–µ—Å—è—Ü–µ–≤',
        'coins': 600,
        'days': 180,
        'price': 10,
        'currency': '‚Ç¨',
        'description': '600 –º–æ–Ω–µ—Ç –Ω–∞ 180 –¥–Ω–µ–π'
    },
    {
        'id': 'year',
        'name': '–ì–æ–¥',
        'coins': 1200,
        'days': 365,
        'price': 20,
        'currency': '‚Ç¨',
        'description': '1200 –º–æ–Ω–µ—Ç –Ω–∞ 365 –¥–Ω–µ–π'
    }
]


async def show_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    await query.answer()

    keyboard = []
    for package in SUBSCRIPTION_PACKAGES:
        button_text = f"üìÖ {package['name']} - {package['price']} {package['currency']}"
        callback_data = f"buy_package_{package['id']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = """üí≥ **–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ LightWeight**

‚úÖ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Tribute
‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —É–¥–æ–±–Ω–æ
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞—Ä—Ç –ª—é–±—ã—Ö —Å—Ç—Ä–∞–Ω
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:"""

    await query.message.edit_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def handle_package_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    user = query.from_user
    callback_data = query.data

    if callback_data.startswith("buy_package_"):
        package_id = callback_data.replace("buy_package_", "")
        package = next((p for p in SUBSCRIPTION_PACKAGES if p['id'] == package_id), None)
    else:
        await query.answer("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if not package:
        await query.answer("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await query.answer()

    from bot.database import db_manager
    db_user = await db_manager.get_user(user.id)

    if not db_user:
        await query.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    if not db_user.api_token:
        keyboard = [[InlineKeyboardButton("üîó –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="link_account")]]
        await query.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    order_id = f"tg_{user.id}_{uuid.uuid4().hex[:8]}"

    logger.info(f"üí≥ User {user.id} starting payment for {package['name']}")
    logger.info(
        f"üì¶ Package: {package['coins']} coins, {package['days']} days, {package['price']} {package['currency']}")
    logger.info(f"üîó Order ID: {order_id}")

    try:
        pending_result = await api_client._request(
            'POST',
            '/api/tribute-pending/create',
            json_data={
                'orderId': order_id,
                'telegramId': user.id,
                'amount': package['price'],
                'currency': 'EUR',
                'packageId': package['id'],
                'coinsAmount': package['coins'],
                'durationDays': package['days']
            }
        )

        if not pending_result.get('success'):
            logger.error(f"‚ùå Failed to create pending payment: {pending_result}")
            await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        logger.info(f"‚úÖ Pending payment created on backend")

    except Exception as e:
        logger.error(f"‚ùå Error creating pending payment: {e}")
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    payment_url = "https://t.me/tribute/app?startapp=sDlI"

    keyboard = [
        [InlineKeyboardButton("üí≥ –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω Tribute", url=payment_url)],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="subscriptions")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = f"""üí≥ **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Tribute**

üì¶ –ü–∞–∫–µ—Ç: **{package['name']}**
üí∞ –ú–æ–Ω–µ—Ç: {package['coins']}
üìÖ –ü–µ—Ä–∏–æ–¥: {package['days']} –¥–Ω–µ–π
üíµ –ö –æ–ø–ª–∞—Ç–µ: **{package['price']} {package['currency']}**

üìù **ID –∑–∞–∫–∞–∑–∞:** `{order_id}`

**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**

1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üí≥ –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω Tribute"
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥: **{package['name']}** ({package['price']} {package['currency']})
3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
4Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç—ë–∂

‚ö°Ô∏è –ú–æ–Ω–µ—Ç—ã –∑–∞—á–∏—Å–ª—è—Ç—Å—è **–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏** –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã!

"""

    await query.message.edit_text(text, reply_markup=reply_markup, parse_mode='Markdown')


def register_payment_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è handlers"""
    application.add_handler(CallbackQueryHandler(show_subscriptions, pattern="^subscriptions$"))
    application.add_handler(CallbackQueryHandler(handle_package_selection, pattern="^buy_package_"))