from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from bot.database import db_manager, Payment
from bot.api_client import api_client
from bot.config import config
import logging
import uuid
from datetime import datetime

logger = logging.getLogger(__name__)


class TributePayment:
    """Tribute.tg payment integration"""

    def __init__(self):
        self.bot_username = "tribute"
        self.start_param = "sDlI"  # –ü–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ —Å—Å—ã–ª–∫–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞

    def get_payment_link(self, user_id: int) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —Å telegram_id"""
        # –î–æ–±–∞–≤–ª—è–µ–º telegram_id –¥–ª—è webhook
        return f"https://t.me/{self.bot_username}/app?startapp={self.start_param}_tid{user_id}"

SUBSCRIPTION_PACKAGES = [
    {
        'id': 'year',
        'name': 'üìÖ –ì–æ–¥',
        'coins': 1200,
        'days': 365,
        'price': 20,
        'currency': '‚Ç¨',
        'description': '1200 –º–æ–Ω–µ—Ç –Ω–∞ 365 –¥–Ω–µ–π'
    },
    {
        'id': '6months',
        'name': 'üìÜ 6 –º–µ—Å—è—Ü–µ–≤',
        'coins': 600,
        'days': 180,
        'price': 10,
        'currency': '‚Ç¨',
        'description': '600 –º–æ–Ω–µ—Ç –Ω–∞ 180 –¥–Ω–µ–π'
    },
    {
        'id': '3months',
        'name': 'üìÜ 3 –º–µ—Å—è—Ü–∞',
        'coins': 300,
        'days': 90,
        'price': 5,
        'currency': '‚Ç¨',
        'description': '300 –º–æ–Ω–µ—Ç –Ω–∞ 90 –¥–Ω–µ–π'
    },
    {
        'id': '1month',
        'name': 'üìÖ 1 –º–µ—Å—è—Ü',
        'coins': 100,
        'days': 30,
        'price': 2,
        'currency': '‚Ç¨',
        'description': '100 –º–æ–Ω–µ—Ç –Ω–∞ 30 –¥–Ω–µ–π'
    }
]

tribute = TributePayment()


async def show_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show available subscription packages"""
    query = update.callback_query
    await query.answer()

    keyboard = []

    for package in SUBSCRIPTION_PACKAGES:
        button_text = f"{package['name']} - {package['price']} {package['currency']}"
        callback_data = f"buy_package_{package['id']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    text = """üí≥ **–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ LightWeight**

‚úÖ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Tribute
‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —É–¥–æ–±–Ω–æ
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞—Ä—Ç –ª—é–±—ã—Ö —Å—Ç—Ä–∞–Ω
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:"""

    await query.message.edit_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def handle_package_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle subscription package selection"""
    query = update.callback_query
    user = query.from_user
    callback_data = query.data

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–∫–µ—Ç
    if callback_data.startswith("buy_package_"):
        package_id = callback_data.replace("buy_package_", "")
        package = next((p for p in SUBSCRIPTION_PACKAGES if p['id'] == package_id), None)
    else:
        await query.answer("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if not package:
        await query.answer("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = await db_manager.get_user(user.id)
    if not db_user:
        await query.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    if not db_user.api_token:
        keyboard = [[InlineKeyboardButton("üîó –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="link_account")]]
        await query.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    # –°–æ–∑–¥–∞–µ–º order_id –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    order_id = str(uuid.uuid4())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –±–æ—Ç–∞ (–¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏)
    async with db_manager.SessionLocal() as session:
        payment = Payment(
            user_id=db_user.id,
            telegram_id=user.id,
            payment_id=order_id,
            amount=package['price'],
            currency=package['currency'],
            status='pending',
            package_id=package['id'],
            coins=package['coins'],
            days=package.get('days', 0)
        )
        session.add(payment)
        await session.commit()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —Å telegram_id
    payment_url = tribute.get_payment_link(user.id)

    logger.info(f"üí≥ User {user.id} started payment for {package['name']}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=payment_url)],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="subscriptions")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    text = f"""üí≥ **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Tribute**

üì¶ –ü–∞–∫–µ—Ç: {package['name']}
üí∞ –ú–æ–Ω–µ—Ç: {package['coins']}
üìÖ –ü–µ—Ä–∏–æ–¥: {package['days']} –¥–Ω–µ–π
üíµ –ö –æ–ø–ª–∞—Ç–µ: {package['price']} {package['currency']}

**–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å:**
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ Tribute
3Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º

üí° **–ú–æ–Ω–µ—Ç—ã –∑–∞—á–∏—Å–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏** –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã!

–ù–µ –Ω—É–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ –±–æ—Ç - –≤—Å—ë –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Å–∞–º–æ üéâ"""

    await query.message.edit_text(text, reply_markup=reply_markup, parse_mode='Markdown')


def register_payment_handlers(application):
    """Register handlers"""
    application.add_handler(CallbackQueryHandler(show_subscriptions, pattern="^subscriptions$"))
    application.add_handler(CallbackQueryHandler(handle_package_selection, pattern="^buy_package_"))