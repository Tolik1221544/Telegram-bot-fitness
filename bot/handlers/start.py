from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from bot.database import db_manager, User
from bot.api_client import api_client
from bot.config import config
from bot.utils.tracking import track_referral
import logging
import re
from datetime import datetime

logger = logging.getLogger(__name__)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command"""
    user = update.effective_user
    args = context.args

    # Check for referral code
    referral_code = None
    if args:
        referral_code = args[0]

    # Get or create user in bot database
    db_user = await db_manager.get_user(user.id)

    if not db_user:
        # New user registration
        db_user = await db_manager.create_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            registration_coins=config.DEFAULT_REGISTRATION_COINS,
            referred_by=referral_code
        )

        # Track referral
        if referral_code:
            await track_referral(referral_code, user.id)

        welcome_text = f"""üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LightweightPay Bot\\!*

*–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:*
üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç–∞–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏  
üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫
üí≥ –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ –†–æ—Å—Å–∏–∏

*–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º\\.*"""
    else:
        welcome_text = f"üëã *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}\\!*\n\n"

        # Update balance if user is linked
        if db_user.api_token:
            try:
                balance = await api_client.get_balance(db_user.api_token)
                welcome_text += f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:* `{balance.get('balance', 0)}` –º–æ–Ω–µ—Ç\n"

                if balance.get('hasActiveSubscription'):
                    expiry = balance.get('subscriptionExpiresAt', '')
                    if expiry and len(expiry) >= 10:
                        expiry = expiry[:10]
                        welcome_text += f"üìÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:* `{expiry}`\n"
            except Exception as e:
                logger.error(f"Error getting balance: {e}")
                welcome_text += "üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:* –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è\\.\\.\\.\n"
        else:
            welcome_text += "üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:* –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è\\.\\.\\.\n"

    # Main menu keyboard
    keyboard = [
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
         InlineKeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="subscriptions")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
         InlineKeyboardButton("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="restore")],
        [InlineKeyboardButton("üîó –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="link_account")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]

    # Add admin button for admins
    if user.id in config.ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='MarkdownV2'
    )


async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /balance command"""
    user = update.effective_user
    db_user = await db_manager.get_user(user.id)

    if not db_user or not db_user.api_token:
        keyboard = [[InlineKeyboardButton("üîó –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="link_account")]]
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    try:
        balance = await api_client.get_balance(db_user.api_token)

        text = f"""üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å*

*–ú–æ–Ω–µ—Ç:* `{balance.get('balance', 0)}`
"""

        if balance.get('hasActiveSubscription'):
            expiry = balance.get('subscriptionExpiresAt', '')
            if expiry and len(expiry) >= 10:
                expiry = expiry[:10]
            text += f"\nüìÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:* `{expiry}`"
        else:
            text += "\nüìÖ *–ü–æ–¥–ø–∏—Å–∫–∞:* –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"

        keyboard = [[InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscriptions")]]

        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='MarkdownV2'
        )

    except Exception as e:
        logger.error(f"Error getting balance: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /subscribe command - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    user = update.effective_user
    db_user = await db_manager.get_user(user.id)

    if not db_user:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        return

    if not db_user.api_token:
        keyboard = [[InlineKeyboardButton("üîó –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="link_account")]]
        await update.message.reply_text(
            "‚ùå –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ –º–µ–Ω—é, —á—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞ "–ü–æ–¥–ø–∏—Å–∫–∏"
    text = """üí≥ *LightWeight PAY*

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å LW coins —Å–æ —Å–∫–∏–¥–∫–æ–π, –æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω—ã –∏ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º\\.

üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:*

‚Ä¢ *1 –º–µ—Å—è—Ü ‚Äî 2 ‚Ç¨*
   ‚Üí _100 –º–æ–Ω–µ—Ç –Ω–∞ 30 –¥–Ω–µ–π_
‚Ä¢ *3 –º–µ—Å—è—Ü–∞ ‚Äî 5 ‚Ç¨*
   ‚Üí _300 –º–æ–Ω–µ—Ç –Ω–∞ 90 –¥–Ω–µ–π_
‚Ä¢ *6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 10 ‚Ç¨*
   ‚Üí _600 –º–æ–Ω–µ—Ç –Ω–∞ 180 –¥–Ω–µ–π_
‚Ä¢ *–ì–æ–¥ ‚Äî 20 ‚Ç¨*
   ‚Üí _1200 –º–æ–Ω–µ—Ç –Ω–∞ 365 –¥–Ω–µ–π_

*üí° –ö–∞–∫ –∫—É–ø–∏—Ç—å:*
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí≥ –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω Tribute"
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏
3Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ

‚ö°Ô∏è –ú–æ–Ω–µ—Ç—ã –∑–∞—á–∏—Å–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç\\!"""

    TRIBUTE_STORE_LINK = "https://t.me/tribute/app?startapp=sDlI"

    keyboard = [
        [InlineKeyboardButton("üí≥ –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω Tribute", url=TRIBUTE_STORE_LINK)],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞", callback_data="check_payment")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="start")]
    ]

    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='MarkdownV2'
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command"""
    help_text = """üìñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start \\- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help \\- –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/balance \\- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
/subscribe \\- –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
/admin \\- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å \\(–¥–ª—è –∞–¥–º–∏–Ω–æ–≤\\)

*–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç:*
1\\. –ù–∞–∂–º–∏—Ç–µ "üîó –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
2\\. –í–≤–µ–¥–∏—Ç–µ email –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
3\\. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

*–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:*
1\\. –ù–∞–∂–º–∏—Ç–µ /subscribe –∏–ª–∏ "üí≥ –ü–æ–¥–ø–∏—Å–∫–∏"
2\\. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç
3\\. –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ Tribute

*–ü—Ä–æ–±–ª–µ–º—ã?*
–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @support"""

    await update.message.reply_text(help_text, parse_mode='MarkdownV2')


async def track_coin_usage(telegram_id: int, amount: int, feature: str, description: str = None):
    """–ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        from bot.database import LwCoinTransaction
        async with db_manager.SessionLocal() as session:
            db_user = await db_manager.get_user(telegram_id)

            spending = LwCoinTransaction(
                telegram_id=telegram_id,
                api_user_id=db_user.api_user_id if db_user else None,
                amount=amount,
                type='spent',
                feature_used=feature,
                description=description,
                date=datetime.utcnow().strftime('%Y-%m-%d')
            )
            session.add(spending)
            await session.commit()

            logger.info(f"Tracked coin usage: {telegram_id} spent {amount} coins on {feature}")
    except Exception as e:
        logger.error(f"Error tracking coin usage: {e}")


# Register handlers
def register_start_handlers(application):
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("balance", balance_command))
    application.add_handler(CommandHandler("subscribe", subscribe_command))