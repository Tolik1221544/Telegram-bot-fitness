from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, ConversationHandler, MessageHandler, filters
from bot.database import db_manager
from bot.api_client import api_client
from bot.config import config
import logging

logger = logging.getLogger(__name__)

# Conversation states
AWAITING_EMAIL, AWAITING_CODE = range(2)


async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show user balance"""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    db_user = await db_manager.get_user(user.id)

    if not db_user or not db_user.api_token:
        keyboard = [[InlineKeyboardButton("üîó –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="link_account")]]
        await query.message.edit_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    try:
        balance = await api_client.get_balance(db_user.api_token)

        text = f"""üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å**

–ú–æ–Ω–µ—Ç: {balance.get('balance', 0)}
"""

        if balance.get('hasActiveSubscription'):
            expiry = balance.get('subscriptionExpiresAt', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            if expiry and len(expiry) >= 10:
                expiry = expiry[:10]
            text += f"\nüìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {expiry}"
        else:
            text += "\nüìÖ –ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]

        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"Error getting balance: {e}")
        await query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]])
        )


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show user statistics"""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    db_user = await db_manager.get_user(user.id)

    if not db_user or not db_user.api_token:
        keyboard = [[InlineKeyboardButton("üîó –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="link_account")]]
        await query.message.edit_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    try:
        stats = await api_client.get_user_stats(db_user.api_token)

        text = f"""üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats.get('workouts', 0)}
üì∏ –§–æ—Ç–æ: {stats.get('photos', 0)}
üé§ –ì–æ–ª–æ—Å–æ–≤—ã—Ö: {stats.get('voice', 0)}
üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö: {stats.get('text', 0)}
üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –º–æ–Ω–µ—Ç: {stats.get('coinsSpent', 0)}
"""

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]

        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        await query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]])
        )


async def start_link_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start account linking process"""
    query = update.callback_query
    await query.answer()

    await query.message.edit_text(
        "üîó **–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ email, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Fitness Tracker:",
        parse_mode='Markdown'
    )

    return AWAITING_EMAIL


async def handle_email_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle email input"""
    email = update.message.text.strip()

    # Validate email
    import re
    if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return AWAITING_EMAIL

    try:
        # Send verification code
        success = await api_client.send_verification_code(email)

        if success:
            context.user_data['linking_email'] = email
            await update.message.reply_text(
                f"‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞:"
            )
            return AWAITING_CODE
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            )
            return AWAITING_EMAIL

    except Exception as e:
        logger.error(f"Error sending verification code: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
        )
        return ConversationHandler.END


async def handle_code_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle verification code input"""
    code = update.message.text.strip()
    email = context.user_data.get('linking_email')

    if not email:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return ConversationHandler.END

    try:
        # Confirm email
        result = await api_client.confirm_email(email, code)

        if 'accessToken' in result:
            # Save token to database
            user = update.effective_user
            db_user = await db_manager.get_user(user.id)

            async with db_manager.SessionLocal() as session:
                db_user.email = email
                db_user.api_token = result['accessToken']
                db_user.api_user_id = result.get('userId')
                session.add(db_user)
                await session.commit()

            await update.message.reply_text(
                "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."
            )

            # Clear user data
            context.user_data.clear()

            return ConversationHandler.END
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return AWAITING_CODE

    except Exception as e:
        logger.error(f"Error confirming code: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
        )
        return ConversationHandler.END


async def cancel_linking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel account linking"""
    await update.message.reply_text(
        "‚ùå –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
    )
    context.user_data.clear()
    return ConversationHandler.END


async def show_restore(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show restore purchases"""
    query = update.callback_query
    await query.answer()

    await query.message.edit_text(
        "üîÑ **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫**\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –ø–æ–∫—É–ø–∫–∏ "
        "–º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏.\n\n"
        "–í—Å–µ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –º–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]),
        parse_mode='Markdown'
    )


async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show help"""
    query = update.callback_query
    await query.answer()

    help_text = """‚ÑπÔ∏è **–ü–æ–º–æ—â—å**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1Ô∏è‚É£ –°–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
2Ô∏è‚É£ –ö—É–ø–∏—Ç–µ –º–æ–Ω–µ—Ç—ã –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É
3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–Ω–µ—Ç—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ @support
"""

    await query.message.edit_text(
        help_text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]),
        parse_mode='Markdown'
    )

async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Return to main menu"""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    db_user = await db_manager.get_user(user.id)

    welcome_text = f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!\n\n"

    if db_user and db_user.api_token:
        try:
            balance = await api_client.get_balance(db_user.api_token)
            welcome_text += f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance.get('balance', 0)} –º–æ–Ω–µ—Ç\n"

            if balance.get('hasActiveSubscription'):
                expiry = balance.get('subscriptionExpiresAt', '')
                if expiry and len(expiry) >= 10:
                    expiry = expiry[:10]
                    welcome_text += f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {expiry}\n"
        except Exception as e:
            logger.error(f"Error getting balance: {e}")
            welcome_text += "–í–∞—à –±–∞–ª–∞–Ω—Å: –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...\n"
    else:
        welcome_text += "–í–∞—à –±–∞–ª–∞–Ω—Å: –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...\n"

    # Main menu keyboard
    keyboard = [
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
         InlineKeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="subscriptions")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
         InlineKeyboardButton("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="restore")],
        [InlineKeyboardButton("üîó –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="link_account")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]

    if user.id in config.ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(welcome_text, reply_markup=reply_markup)


def register_user_handlers(application):
    """Register user handlers"""
    # Callback handlers
    application.add_handler(CallbackQueryHandler(back_to_start, pattern="^start$"))  # –î–æ–±–∞–≤–∏–ª–∏
    application.add_handler(CallbackQueryHandler(show_balance, pattern="^balance$"))
    application.add_handler(CallbackQueryHandler(show_stats, pattern="^stats$"))
    application.add_handler(CallbackQueryHandler(show_restore, pattern="^restore$"))
    application.add_handler(CallbackQueryHandler(show_help, pattern="^help$"))

    # Account linking conversation
    link_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_link_account, pattern="^link_account$")],
        states={
            AWAITING_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_email_input)],
            AWAITING_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_code_input)],
        },
        fallbacks=[MessageHandler(filters.Regex('^/cancel$'), cancel_linking)],
        per_message=False  # –î–æ–±–∞–≤–∏–ª–∏
    )

    application.add_handler(link_conv_handler)