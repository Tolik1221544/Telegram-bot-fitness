from bot.database import db_manager, Payment, LwCoinTransaction
from bot.api_client import api_client
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


async def handle_tribute_payment(payment_data: dict):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç Tribute

    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ Tribute –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç webhook –Ω–∞ –≤–∞—à –±—ç–∫–µ–Ω–¥.
    –ë—ç–∫–µ–Ω–¥ –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞.

    Args:
        payment_data: {
            'user_id': telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
            'package_id': ID –ø–∞–∫–µ—Ç–∞ ('year', '6months', etc),
            'amount': —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞,
            'currency': –≤–∞–ª—é—Ç–∞,
            'transaction_id': ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç Tribute
        }
    """
    try:
        user_id = payment_data.get('user_id')
        package_id = payment_data.get('package_id')
        amount = payment_data.get('amount')
        transaction_id = payment_data.get('transaction_id')

        logger.info(f"üí≥ Processing Tribute payment: user={user_id}, package={package_id}, amount={amount}")

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = await db_manager.get_user(user_id)
        if not db_user:
            logger.error(f"‚ùå User {user_id} not found in database")
            return False

        if not db_user.api_token:
            logger.error(f"‚ùå User {user_id} has no API token")
            return False

        # –ù–∞—Ö–æ–¥–∏–º –ø–∞–∫–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        from bot.handlers.payment import SUBSCRIPTION_PACKAGES
        package = next((p for p in SUBSCRIPTION_PACKAGES if p['id'] == package_id), None)

        if not package:
            logger.error(f"‚ùå Package {package_id} not found")
            return False

        # –ù–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ API
        result = await api_client.purchase_subscription(
            db_user.api_token,
            coins=package['coins'],
            days=package['days'],
            price=package['price']
        )

        logger.info(f"‚úÖ Coins credited: {package['coins']} to user {user_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç—ë–∂ –≤ –ë–î
        async with db_manager.SessionLocal() as session:
            # –ù–∞—Ö–æ–¥–∏–º pending –ø–ª–∞—Ç—ë–∂
            from sqlalchemy import select
            stmt = select(Payment).where(
                Payment.telegram_id == user_id,
                Payment.package_id == package_id,
                Payment.status == 'pending'
            ).order_by(Payment.created_at.desc()).limit(1)

            result_payment = await session.execute(stmt)
            payment = result_payment.scalar_one_or_none()

            if payment:
                payment.status = 'completed'
                payment.completed_at = datetime.utcnow()
                payment.payment_id = transaction_id
            else:
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂
                payment = Payment(
                    user_id=db_user.id,
                    telegram_id=user_id,
                    payment_id=transaction_id,
                    amount=amount,
                    currency='EUR',
                    status='completed',
                    package_id=package_id,
                    coins=package['coins'],
                    days=package['days'],
                    completed_at=datetime.utcnow()
                )
                session.add(payment)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –º–æ–Ω–µ—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤
            coin_transaction = LwCoinTransaction(
                telegram_id=user_id,
                api_user_id=db_user.api_user_id,
                amount=package['coins'],  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
                type='purchase',
                feature_used='subscription',
                description=f"–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {package['name']}",
                date=datetime.utcnow().strftime('%Y-%m-%d')
            )
            session.add(coin_transaction)

            await session.commit()

        logger.info(f"üíæ Payment saved to database: {transaction_id}")
        return True

    except Exception as e:
        logger.error(f"‚ùå Error processing Tribute payment: {e}")
        logger.exception("Full traceback:")
        return False


async def track_coin_spending(user_id: int, amount: int, feature: str, description: str = None):
    """
    –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É –º–æ–Ω–µ—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞

    –í—ã–∑—ã–≤–∞–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç—Ä–∞—Ç–∏—Ç –º–æ–Ω–µ—Ç—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)
        feature: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ('photo', 'voice', 'text', 'ai_response')
        description: –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã
    """
    try:
        db_user = await db_manager.get_user(user_id)
        if not db_user:
            logger.warning(f"User {user_id} not found for coin spending tracking")
            return

        async with db_manager.SessionLocal() as session:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–û–ï —á–∏—Å–ª–æ –¥–ª—è —Ç—Ä–∞—Ç
            spending = LwCoinTransaction(
                telegram_id=user_id,
                api_user_id=db_user.api_user_id,
                amount=-abs(amount),  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ!
                type='spent',
                feature_used=feature,
                description=description or f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è {feature}",
                date=datetime.utcnow().strftime('%Y-%m-%d')
            )
            session.add(spending)

            # –û–±–Ω–æ–≤–ª—è–µ–º total_spent —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user.total_spent = (db_user.total_spent or 0) + abs(amount)
            session.add(db_user)

            await session.commit()

        logger.info(f"üí∏ Tracked spending: user={user_id}, amount={amount}, feature={feature}")

    except Exception as e:
        logger.error(f"Error tracking coin spending: {e}")
